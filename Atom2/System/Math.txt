(1 makeOperation) (makeUnaryOperation) set
(2 makeOperation) (makeBinaryOperation) set

ExpressionType Increment makeUnaryOperation (increment) set
ExpressionType Decrement makeUnaryOperation (decrement) set

ExpressionType Equal makeBinaryOperation (equal) set
ExpressionType NotEqual makeBinaryOperation (notEqual) set
ExpressionType LessThanOrEqual makeBinaryOperation (less-or-equal) set
ExpressionType LessThan makeBinaryOperation (less) set
ExpressionType GreaterThanOrEqual makeBinaryOperation (greater-or-equal) set
ExpressionType GreaterThan makeBinaryOperation (greater) set

ExpressionType And makeBinaryOperation (and) set
ExpressionType Or makeBinaryOperation (or) set

ExpressionType Add makeBinaryOperation (add) set
ExpressionType Subtract makeBinaryOperation (subtract) set
ExpressionType Multiply makeBinaryOperation (multiply) set
ExpressionType Divide makeBinaryOperation (divide) set
ExpressionType Modulo makeBinaryOperation (modulo) set

ExpressionType Double makeOperation (toDouble) set
ExpressionType Int32 makeOperation (toInt) set

(power) "base exponent : power"
(
  (a b) put
  Math (a toDouble b toDouble) Pow
)
word

(0.5 power) (squareRoot) set

(3 swap 2 range ((a " " add output) (3 a squareRoot toInt 2 range (a b modulo 0 notEqual) (b) all) if) (a) map) (dumpPrimes) set

((n) put (1) (n n decrement factorial multiply) n 1 equal ifElse) (factorial) set
